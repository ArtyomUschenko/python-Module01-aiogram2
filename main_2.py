
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from babel.plural import skip_token
import asyncio

import api_token
from sqlite_db import db_start, create_profile, edit_profile

# –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ---------------------------------------------------------------


storage = MemoryStorage() # –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
bot = Bot(api_token.TOKEN) # —Ç–æ–∫–µ–Ω
dp = Dispatcher(bot,storage=storage) # –¥–∏—Å–ø–µ—Ç—á–µ—Ä

class ProfileStates(StatesGroup):
    name = State()
    age = State()
    description = State()
    photo = State()



#
@dp.message_handler(commands=['start']) # –∫–æ–º–∞–Ω–¥–∞ /start
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è –æ —Å–∏—Å—Ç–µ–º–µ. üòÖ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create ")
    await create_profile(user_id=message.from_user.id)


@dp.message_handler(commands=['cancel'], state="*")
async def cancel_command(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.finish()
    await message.reply("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞")




@dp.message_handler(commands=['create']) # –∫–æ–º–∞–Ω–¥–∞ /create
async def create_command(message: types.Message):
    await message.answer( "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ –∏–º—è ")
    await ProfileStates.name.set()

@dp.message_handler(state=ProfileStates.name)
async def checking_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await message.answer( "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç ")
    await ProfileStates.next()

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ —Ü–∏—Ñ—Ä –≤ —Ä–∞–∑–¥–µ–ª –≤–æ–∑—Ä–∞—Å—Ç
@dp.message_handler(lambda message: not message.text.isdigit(), state=ProfileStates.age)
async def checking_input_age(message: types.Message):
    return await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@dp.message_handler(state=ProfileStates.age)
async def process_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text

    await message.answer( "–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    await ProfileStates.next()


@dp.message_handler(state=ProfileStates.description)
async def process_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text

    await message.answer( "–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    await ProfileStates.next()

@dp.message_handler(lambda message: not message.photo or len(message.photo) == 0, state=ProfileStates.photo)
async def checking_input_photo(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


@dp.message_handler(content_types=["photo"], state=ProfileStates.photo)
async def process_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
        await bot.send_photo(message.from_user.id, photo=data['photo'], caption=f'{data["name"]}, {data["age"]}, {data["description"]}')
    await edit_profile(state, user_id=message.from_user.id)
    await message.answer( "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    await state.finish() # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏


async def on_startup(_):
    await db_start()
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")



if __name__ == '__main__':
    executor.start_polling(dp,skip_updates=True, on_startup=on_startup)


#